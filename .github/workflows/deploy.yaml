name: Build and Push Docker image to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_run:
    workflows: ["Terraform Plan and Apply"]
    types:
      - completed

env:
  aws-region: us-west-2

jobs:
  terraform-config:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      # Step 3: Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Run Terraform Plan and Capture Output
        id: plan
        run: |
          terraform plan -no-color > plan.txt
          cat plan.txt

      - name: Comment on PR with Terraform Plan
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const pr_number = context.payload.pull_request.number;
            github.rest.issues.createComment({
              issue_number: pr_number,     # Pull request number
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Result\n\`\`\`\n${plan}\n\`\`\``
            });

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform-config
    # Only run if the terraform worflow was successful
    if: ${{ needs.terraform-config.result == 'success' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Load Secrets
      #   run: |
      #     aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output-text text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: simplebank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
